name: Performance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  performance-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows MSVC 2022 Release (performance focused)
          - name: "Windows MSVC 2022 Performance"
            os: windows-2022
            compiler: msvc
            build_type: Release
            
          # Ubuntu GCC 11 Release (performance focused)
          - name: "Ubuntu GCC 11 Performance"
            os: ubuntu-22.04
            compiler: gcc
            version: "11"
            build_type: Release
            
          # Ubuntu Clang 14 Release (performance focused)
          - name: "Ubuntu Clang 14 Performance"
            os: ubuntu-22.04
            compiler: clang
            version: "14"
            build_type: Release

          # macOS Clang Release (performance focused)
          - name: "macOS Clang Performance"
            os: macos-latest
            compiler: clang
            build_type: Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSVC
      if: matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: Setup GCC
      if: matrix.compiler == 'gcc'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.version }} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.version }} 100

    - name: Setup Clang
      if: matrix.compiler == 'clang' && matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-${{ matrix.version }} \
          libc++-${{ matrix.version }}-dev \
          libc++abi-${{ matrix.version }}-dev \
          libc++1-${{ matrix.version }} \
          libc++abi1-${{ matrix.version }}
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ matrix.version }} 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ matrix.version }} 100

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -A x64

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-2022'
      run: |
        export CC=${{ matrix.compiler == 'gcc' && 'gcc' || 'clang' }}
        export CXX=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Run Performance Tests
      working-directory: build
      run: |
        echo "Running performance tests on ${{ matrix.name }}"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./${{ matrix.build_type }}/performance_test.exe --benchmark_format=json --benchmark_out=performance_results.json
        else
          ./performance_test --benchmark_format=json --benchmark_out=performance_results.json
        fi
      shell: bash

    - name: Upload Performance Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-results-${{ matrix.os }}-${{ matrix.compiler }}${{ matrix.version && format('-{0}', matrix.version) || '' }}
        path: build/performance_results.json
        retention-days: 30

    - name: Display Performance Summary
      working-directory: build
      run: |
        echo "=== Performance Test Summary ==="
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./${{ matrix.build_type }}/performance_test.exe --benchmark_filter=".*" --benchmark_list_tests
        else
          ./performance_test --benchmark_filter=".*" --benchmark_list_tests
        fi
      shell: bash

  # Aggregate performance results
  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: performance-tests
    if: always()
    
    steps:
    - name: Download all performance results
      uses: actions/download-artifact@v4
      with:
        pattern: performance-results-*
        merge-multiple: true
        path: performance-results

    - name: List downloaded results
      run: |
        echo "Downloaded performance results:"
        find performance-results -name "*.json" -exec echo "File: {}" \; -exec cat {} \; -exec echo "" \; 